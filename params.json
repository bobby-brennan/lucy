{"name":"Lucy Blog","tagline":"See what lucy can do!","body":"### First post: Hello World\r\n10/23/2014<br><br>\r\nThe first official lucy release was pushed today! You can see the project here:\r\n<br>\r\nhttps://github.com/bobby-brennan/lucy\r\n<br>\r\n```define``` and ```publish``` are still in beta, but you can ```build``` all you want! E-mail me (bobby@bbrennan.info) if you'd like an early peek at the full version.\r\n<br>\r\n<br>\r\nSo what can lucy do? To start, there are two main components to a lucy module:<br>\r\n* DEFINITION - this is JSON that describes what kind of code is being generated, and provides a sample configuration.<br>\r\n* PACKAGE - this is a set of code templates, scripts, and files that will be used to generate code. There can be multiple packages per definition.<br>\r\n\r\nMost users will simply run ```lucy build``` to generate code from an existing lucy package. However, you can also create your own definitions and packages to share with others. Let's walk through a \"hello world\" example.\r\n\r\n<i>Note that while we're in beta, the ```define``` and ```publish``` commands won't work unless you're signed up. Feel free to jump ahead to ```build``` though!</i>\r\n\r\n### The Definition\r\nWe start with a definition:\r\n<br><br><i>def.json</i>\r\n```js\r\n{\r\n  \"name\": \"hello-world\",\r\n  \"description\": \"A hello world example for lucy\",\r\n  \"sample_input\": {\r\n    \"greeting\": \"Hello\",\r\n    \"person\": \"world\"\r\n  }\r\n}\r\n```\r\n\r\nand run:\r\n```bash\r\nlucy define def.json\r\n```\r\nwhich pushes the definition to lucy's servers.\r\n<br>\r\n### The Package\r\nNow we create a package by starting a new directory 'pkg'\r\n<br><br><i>pkg/hello.ejs</i>\r\n```js\r\nconsole.log('<%- greeting %> <%- person %>');\r\n```\r\n\r\n<br><i>pkg/package.json</i>\r\n```js\r\n{\r\n  \"lucy_def\": \"hello-world\",\r\n  \"package_name\": \"js\",\r\n  \"files\": [{\r\n    \"from\": \"hello.ejs\",\r\n    \"to\": \"hello.js\",\r\n    \"method\": \"render\"\r\n  }]\r\n}\r\n```\r\n\r\nand run\r\n```bash\r\nlucy publish pkg\r\n```\r\nwhich will zip up the directory and upload the resulting tarball.\r\n<br>\r\n### Build!\r\nNow anyone can create a config.json like\r\n<br><br><i>config.json</i>\r\n```js\r\n{\r\n  \"greeting\": \"Yo\",\r\n  \"person\": \"lucy\"\r\n}\r\n```\r\n\r\nand run\r\n```bash\r\nlucy build hello-world:js config.json\r\n```\r\n\r\nwhich will generate this file in the working directory:\r\n<br><br><i>hello.js</i>\r\n```js\r\nconsole.log(\"Yo lucy\");\r\n```\r\n<br>\r\n### Extend!\r\nWhat's more, you (or anyone else) can add other packages to the hello-world definition, for example:\r\n<br><br><i>hello.ejs</i>\r\n```java\r\npublic class HelloWorld {\r\n  public static void main(String[] args) {\r\n    System.out.println(\"<%- greeting %> <%- person %>\");\r\n  }\r\n}\r\n```\r\n\r\n<br><i>package.json</i>\r\n```js\r\n{\r\n  \"lucy_def\": \"hello-world\",\r\n  \"package_name\": \"java\",\r\n  \"files\": [{\r\n    \"from\": \"hello.ejs\",\r\n    \"to\": \"HelloWorld.java\",\r\n    \"method\": \"render\"\r\n  }]\r\n}\r\n```\r\n<br><br>\r\nE-mail bobby@bbrennan.info if you're intersted in giving it a shot!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}